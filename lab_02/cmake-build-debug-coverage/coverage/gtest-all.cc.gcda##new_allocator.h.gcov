        -:    0:Source:/usr/include/c++/8/ext/new_allocator.h
        -:    0:Graph:/home/denis/OOP/lab_02/cmake-build-debug-coverage/lib/googletest/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.gcno
        -:    0:Data:/home/denis/OOP/lab_02/cmake-build-debug-coverage/lib/googletest/googletest/CMakeFiles/gtest.dir/src/gtest-all.cc.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Allocator that wraps operator new -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2001-2018 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/** @file ext/new_allocator.h
        -:   26: *  This file is a GNU extension to the Standard C++ Library.
        -:   27: */
        -:   28:
        -:   29:#ifndef _NEW_ALLOCATOR_H
        -:   30:#define _NEW_ALLOCATOR_H 1
        -:   31:
        -:   32:#include <bits/c++config.h>
        -:   33:#include <new>
        -:   34:#include <bits/functexcept.h>
        -:   35:#include <bits/move.h>
        -:   36:#if __cplusplus >= 201103L
        -:   37:#include <type_traits>
        -:   38:#endif
        -:   39:
        -:   40:namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
        -:   41:{
        -:   42:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   43:
        -:   44:  using std::size_t;
        -:   45:  using std::ptrdiff_t;
        -:   46:
        -:   47:  /**
        -:   48:   *  @brief  An allocator that uses global new, as per [20.4].
        -:   49:   *  @ingroup allocators
        -:   50:   *
        -:   51:   *  This is precisely the allocator defined in the C++ Standard.
        -:   52:   *    - all allocation calls operator new
        -:   53:   *    - all deallocation calls operator delete
        -:   54:   *
        -:   55:   *  @tparam  _Tp  Type of allocated object.
        -:   56:   */
        -:   57:  template<typename _Tp>
        -:   58:    class new_allocator
        -:   59:    {
        -:   60:    public:
        -:   61:      typedef size_t     size_type;
        -:   62:      typedef ptrdiff_t  difference_type;
        -:   63:      typedef _Tp*       pointer;
        -:   64:      typedef const _Tp* const_pointer;
        -:   65:      typedef _Tp&       reference;
        -:   66:      typedef const _Tp& const_reference;
        -:   67:      typedef _Tp        value_type;
        -:   68:
        -:   69:      template<typename _Tp1>
        -:   70:	struct rebind
        -:   71:	{ typedef new_allocator<_Tp1> other; };
        -:   72:
        -:   73:#if __cplusplus >= 201103L
        -:   74:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:   75:      // 2103. propagate_on_container_move_assignment
        -:   76:      typedef std::true_type propagate_on_container_move_assignment;
        -:   77:#endif
        -:   78:
     109*:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEC2Ev:
        1:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIcEC2Ev:
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIwEC2Ev:
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIdEC2Ev:
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt6vectorIdSaIdEEEC2Ev:
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN7testing8internal13edit_distance8EditTypeEEC2Ev:
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt6vectorIN7testing8internal13edit_distance8EditTypeESaIS5_EEEC2Ev:
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2Ev:
        1:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmEEEC2Ev:
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt4pairIcPKcEEEC2Ev:
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN7testing8internal34TypeParameterizedTestSuiteRegistry30TypeParameterizedTestSuiteInfoEEEEC2Ev:
        1:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN7testing8internal9TraceInfoEEC2Ev:
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN7testing14TestPartResultEEC2Ev:
       49:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIPN7testing8internal30ParameterizedTestSuiteInfoBaseEEC2Ev:
        1:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorImEC2Ev:
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN7testing12TestPropertyEEC2Ev:
       49:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIPN7testing8TestInfoEEC2Ev:
        4:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIiEC2Ev:
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIPN7testing17TestEventListenerEEC2Ev:
        1:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIPN7testing11EnvironmentEEC2Ev:
        1:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIPN7testing9TestSuiteEEC2Ev:
        1:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIPcEC2Ev:
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
        -:   80:
       4*:   81:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt6vectorIN7testing8internal13edit_distance8EditTypeESaIS5_EEEC2ERKS8_:
    #####:   81:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN7testing8internal13edit_distance8EditTypeEEC2ERKS5_:
    #####:   81:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt6vectorIdSaIdEEEC2ERKS4_:
    #####:   81:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIdEC2ERKS1_:
    #####:   81:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2ERKS7_:
        4:   81:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIcEC2ERKS1_:
    #####:   81:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
        -:   82:
        -:   83:      template<typename _Tp1>
        -:   84:	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
        -:   85:
     113*:   86:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev:
        5:   86:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIcED2Ev:
    #####:   86:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIwED2Ev:
    #####:   86:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIdED2Ev:
    #####:   86:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt6vectorIdSaIdEEED2Ev:
    #####:   86:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN7testing8internal13edit_distance8EditTypeEED2Ev:
    #####:   86:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt6vectorIN7testing8internal13edit_distance8EditTypeESaIS5_EEED2Ev:
    #####:   86:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmEEED2Ev:
    #####:   86:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt4pairIcPKcEEED2Ev:
    #####:   86:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN7testing8internal34TypeParameterizedTestSuiteRegistry30TypeParameterizedTestSuiteInfoEEEED2Ev:
        1:   86:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEED2Ev:
        1:   86:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN7testing8internal9TraceInfoEED2Ev:
    #####:   86:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN7testing14TestPartResultEED2Ev:
       49:   86:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIPN7testing8internal30ParameterizedTestSuiteInfoBaseEED2Ev:
        1:   86:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorImED2Ev:
    #####:   86:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIN7testing12TestPropertyEED2Ev:
       49:   86:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIPN7testing8TestInfoEED2Ev:
        4:   86:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIiED2Ev:
    #####:   86:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIPN7testing17TestEventListenerEED2Ev:
        1:   86:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIPN7testing11EnvironmentEED2Ev:
        1:   86:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIPN7testing9TestSuiteEED2Ev:
        1:   86:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIPcED2Ev:
    #####:   86:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
        -:   87:
        -:   88:      pointer
        -:   89:      address(reference __x) const _GLIBCXX_NOEXCEPT
        -:   90:      { return std::__addressof(__x); }
        -:   91:
        -:   92:      const_pointer
        -:   93:      address(const_reference __x) const _GLIBCXX_NOEXCEPT
        -:   94:      { return std::__addressof(__x); }
        -:   95:
        -:   96:      // NB: __n is permitted to be 0.  The C++ standard says nothing
        -:   97:      // about what the return value is when __n == 0.
        -:   98:      pointer
      26*:   99:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  100:      {
      26*:  101:	if (__n > this->max_size())
    #####:  102:	  std::__throw_bad_alloc();
        -:  103:
        -:  104:#if __cpp_aligned_new
        -:  105:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  106:	  {
        -:  107:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  108:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  109:	  }
        -:  110:#endif
      26*:  111:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  112:      }
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEmPKv:
        2:   99:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  100:      {
        2:  101:	if (__n > this->max_size())
        2:  101-block  0
    #####:  102:	  std::__throw_bad_alloc();
    %%%%%:  102-block  0
        -:  103:
        -:  104:#if __cpp_aligned_new
        -:  105:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  106:	  {
        -:  107:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  108:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  109:	  }
        -:  110:#endif
        2:  111:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        2:  111-block  0
        -:  112:      }
------------------
_ZN9__gnu_cxx13new_allocatorIcE8allocateEmPKv:
    #####:   99:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  100:      {
    #####:  101:	if (__n > this->max_size())
    %%%%%:  101-block  0
    #####:  102:	  std::__throw_bad_alloc();
    %%%%%:  102-block  0
        -:  103:
        -:  104:#if __cpp_aligned_new
        -:  105:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  106:	  {
        -:  107:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  108:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  109:	  }
        -:  110:#endif
    #####:  111:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  111-block  0
        -:  112:      }
------------------
_ZN9__gnu_cxx13new_allocatorIN7testing8internal13edit_distance8EditTypeEE8allocateEmPKv:
    #####:   99:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  100:      {
    #####:  101:	if (__n > this->max_size())
    %%%%%:  101-block  0
    #####:  102:	  std::__throw_bad_alloc();
    %%%%%:  102-block  0
        -:  103:
        -:  104:#if __cpp_aligned_new
        -:  105:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  106:	  {
        -:  107:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  108:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  109:	  }
        -:  110:#endif
    #####:  111:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  111-block  0
        -:  112:      }
------------------
_ZN9__gnu_cxx13new_allocatorIN7testing14TestPartResultEE8allocateEmPKv:
    #####:   99:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  100:      {
    #####:  101:	if (__n > this->max_size())
    %%%%%:  101-block  0
    #####:  102:	  std::__throw_bad_alloc();
    %%%%%:  102-block  0
        -:  103:
        -:  104:#if __cpp_aligned_new
        -:  105:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  106:	  {
        -:  107:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  108:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  109:	  }
        -:  110:#endif
    #####:  111:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  111-block  0
        -:  112:      }
------------------
_ZN9__gnu_cxx13new_allocatorIN7testing12TestPropertyEE8allocateEmPKv:
    #####:   99:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  100:      {
    #####:  101:	if (__n > this->max_size())
    %%%%%:  101-block  0
    #####:  102:	  std::__throw_bad_alloc();
    %%%%%:  102-block  0
        -:  103:
        -:  104:#if __cpp_aligned_new
        -:  105:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  106:	  {
        -:  107:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  108:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  109:	  }
        -:  110:#endif
    #####:  111:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  111-block  0
        -:  112:      }
------------------
_ZN9__gnu_cxx13new_allocatorIPN7testing8TestInfoEE8allocateEmPKv:
       20:   99:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  100:      {
       20:  101:	if (__n > this->max_size())
       20:  101-block  0
    #####:  102:	  std::__throw_bad_alloc();
    %%%%%:  102-block  0
        -:  103:
        -:  104:#if __cpp_aligned_new
        -:  105:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  106:	  {
        -:  107:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  108:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  109:	  }
        -:  110:#endif
       20:  111:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
       20:  111-block  0
        -:  112:      }
------------------
_ZN9__gnu_cxx13new_allocatorIPN7testing17TestEventListenerEE8allocateEmPKv:
        1:   99:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  100:      {
        1:  101:	if (__n > this->max_size())
        1:  101-block  0
    #####:  102:	  std::__throw_bad_alloc();
    %%%%%:  102-block  0
        -:  103:
        -:  104:#if __cpp_aligned_new
        -:  105:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  106:	  {
        -:  107:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  108:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  109:	  }
        -:  110:#endif
        1:  111:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        1:  111-block  0
        -:  112:      }
------------------
_ZN9__gnu_cxx13new_allocatorIPN7testing11EnvironmentEE8allocateEmPKv:
    #####:   99:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  100:      {
    #####:  101:	if (__n > this->max_size())
    %%%%%:  101-block  0
    #####:  102:	  std::__throw_bad_alloc();
    %%%%%:  102-block  0
        -:  103:
        -:  104:#if __cpp_aligned_new
        -:  105:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  106:	  {
        -:  107:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  108:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  109:	  }
        -:  110:#endif
    #####:  111:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  111-block  0
        -:  112:      }
------------------
_ZN9__gnu_cxx13new_allocatorIN7testing8internal9TraceInfoEE8allocateEmPKv:
    #####:   99:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  100:      {
    #####:  101:	if (__n > this->max_size())
    %%%%%:  101-block  0
    #####:  102:	  std::__throw_bad_alloc();
    %%%%%:  102-block  0
        -:  103:
        -:  104:#if __cpp_aligned_new
        -:  105:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  106:	  {
        -:  107:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  108:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  109:	  }
        -:  110:#endif
    #####:  111:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  111-block  0
        -:  112:      }
------------------
_ZN9__gnu_cxx13new_allocatorIPN7testing9TestSuiteEE8allocateEmPKv:
        3:   99:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  100:      {
        3:  101:	if (__n > this->max_size())
        3:  101-block  0
    #####:  102:	  std::__throw_bad_alloc();
    %%%%%:  102-block  0
        -:  103:
        -:  104:#if __cpp_aligned_new
        -:  105:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  106:	  {
        -:  107:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  108:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  109:	  }
        -:  110:#endif
        3:  111:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        3:  111-block  0
        -:  112:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN7testing8internal34TypeParameterizedTestSuiteRegistry30TypeParameterizedTestSuiteInfoEEEE8allocateEmPKv:
    #####:   99:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  100:      {
    #####:  101:	if (__n > this->max_size())
    %%%%%:  101-block  0
    #####:  102:	  std::__throw_bad_alloc();
    %%%%%:  102-block  0
        -:  103:
        -:  104:#if __cpp_aligned_new
        -:  105:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  106:	  {
        -:  107:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  108:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  109:	  }
        -:  110:#endif
    #####:  111:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  111-block  0
        -:  112:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateEmPKv:
    #####:   99:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  100:      {
    #####:  101:	if (__n > this->max_size())
    %%%%%:  101-block  0
    #####:  102:	  std::__throw_bad_alloc();
    %%%%%:  102-block  0
        -:  103:
        -:  104:#if __cpp_aligned_new
        -:  105:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  106:	  {
        -:  107:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  108:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  109:	  }
        -:  110:#endif
    #####:  111:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  111-block  0
        -:  112:      }
------------------
_ZN9__gnu_cxx13new_allocatorIdE8allocateEmPKv:
    #####:   99:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  100:      {
    #####:  101:	if (__n > this->max_size())
    %%%%%:  101-block  0
    #####:  102:	  std::__throw_bad_alloc();
    %%%%%:  102-block  0
        -:  103:
        -:  104:#if __cpp_aligned_new
        -:  105:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  106:	  {
        -:  107:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  108:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  109:	  }
        -:  110:#endif
    #####:  111:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  111-block  0
        -:  112:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt6vectorIdSaIdEEE8allocateEmPKv:
    #####:   99:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  100:      {
    #####:  101:	if (__n > this->max_size())
    %%%%%:  101-block  0
    #####:  102:	  std::__throw_bad_alloc();
    %%%%%:  102-block  0
        -:  103:
        -:  104:#if __cpp_aligned_new
        -:  105:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  106:	  {
        -:  107:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  108:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  109:	  }
        -:  110:#endif
    #####:  111:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  111-block  0
        -:  112:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt6vectorIN7testing8internal13edit_distance8EditTypeESaIS5_EEE8allocateEmPKv:
    #####:   99:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  100:      {
    #####:  101:	if (__n > this->max_size())
    %%%%%:  101-block  0
    #####:  102:	  std::__throw_bad_alloc();
    %%%%%:  102-block  0
        -:  103:
        -:  104:#if __cpp_aligned_new
        -:  105:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  106:	  {
        -:  107:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  108:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  109:	  }
        -:  110:#endif
    #####:  111:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  111-block  0
        -:  112:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmEEE8allocateEmPKv:
    #####:   99:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  100:      {
    #####:  101:	if (__n > this->max_size())
    %%%%%:  101-block  0
    #####:  102:	  std::__throw_bad_alloc();
    %%%%%:  102-block  0
        -:  103:
        -:  104:#if __cpp_aligned_new
        -:  105:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  106:	  {
        -:  107:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  108:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  109:	  }
        -:  110:#endif
    #####:  111:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  111-block  0
        -:  112:      }
------------------
_ZN9__gnu_cxx13new_allocatorImE8allocateEmPKv:
    #####:   99:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  100:      {
    #####:  101:	if (__n > this->max_size())
    %%%%%:  101-block  0
    #####:  102:	  std::__throw_bad_alloc();
    %%%%%:  102-block  0
        -:  103:
        -:  104:#if __cpp_aligned_new
        -:  105:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  106:	  {
        -:  107:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  108:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  109:	  }
        -:  110:#endif
    #####:  111:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  111-block  0
        -:  112:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt4pairIcPKcEEE8allocateEmPKv:
    #####:   99:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  100:      {
    #####:  101:	if (__n > this->max_size())
    %%%%%:  101-block  0
    #####:  102:	  std::__throw_bad_alloc();
    %%%%%:  102-block  0
        -:  103:
        -:  104:#if __cpp_aligned_new
        -:  105:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  106:	  {
        -:  107:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  108:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  109:	  }
        -:  110:#endif
    #####:  111:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  111-block  0
        -:  112:      }
------------------
_ZN9__gnu_cxx13new_allocatorIiE8allocateEmPKv:
    #####:   99:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  100:      {
    #####:  101:	if (__n > this->max_size())
    %%%%%:  101-block  0
    #####:  102:	  std::__throw_bad_alloc();
    %%%%%:  102-block  0
        -:  103:
        -:  104:#if __cpp_aligned_new
        -:  105:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  106:	  {
        -:  107:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  108:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  109:	  }
        -:  110:#endif
    #####:  111:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  111-block  0
        -:  112:      }
------------------
_ZN9__gnu_cxx13new_allocatorIPcE8allocateEmPKv:
    #####:   99:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  100:      {
    #####:  101:	if (__n > this->max_size())
    %%%%%:  101-block  0
    #####:  102:	  std::__throw_bad_alloc();
    %%%%%:  102-block  0
        -:  103:
        -:  104:#if __cpp_aligned_new
        -:  105:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  106:	  {
        -:  107:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  108:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  109:	  }
        -:  110:#endif
    #####:  111:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  111-block  0
        -:  112:      }
------------------
_ZN9__gnu_cxx13new_allocatorIwE8allocateEmPKv:
    #####:   99:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  100:      {
    #####:  101:	if (__n > this->max_size())
    %%%%%:  101-block  0
    #####:  102:	  std::__throw_bad_alloc();
    %%%%%:  102-block  0
        -:  103:
        -:  104:#if __cpp_aligned_new
        -:  105:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  106:	  {
        -:  107:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  108:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  109:	  }
        -:  110:#endif
    #####:  111:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  111-block  0
        -:  112:      }
------------------
        -:  113:
        -:  114:      // __p is not permitted to be a null pointer.
        -:  115:      void
      26*:  116:      deallocate(pointer __p, size_type)
        -:  117:      {
        -:  118:#if __cpp_aligned_new
        -:  119:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  120:	  {
        -:  121:	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
        -:  122:	    return;
        -:  123:	  }
        -:  124:#endif
      26*:  125:	::operator delete(__p);
        -:  126:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt4pairIcPKcEEE10deallocateEPS6_m:
    #####:  116:      deallocate(pointer __p, size_type)
    %%%%%:  116-block  0
        -:  117:      {
        -:  118:#if __cpp_aligned_new
        -:  119:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  120:	  {
        -:  121:	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
        -:  122:	    return;
        -:  123:	  }
        -:  124:#endif
    #####:  125:	::operator delete(__p);
    %%%%%:  125-block  0
        -:  126:      }
------------------
_ZN9__gnu_cxx13new_allocatorIcE10deallocateEPcm:
    #####:  116:      deallocate(pointer __p, size_type)
    %%%%%:  116-block  0
        -:  117:      {
        -:  118:#if __cpp_aligned_new
        -:  119:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  120:	  {
        -:  121:	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
        -:  122:	    return;
        -:  123:	  }
        -:  124:#endif
    #####:  125:	::operator delete(__p);
    %%%%%:  125-block  0
        -:  126:      }
------------------
_ZN9__gnu_cxx13new_allocatorIwE10deallocateEPwm:
    #####:  116:      deallocate(pointer __p, size_type)
    %%%%%:  116-block  0
        -:  117:      {
        -:  118:#if __cpp_aligned_new
        -:  119:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  120:	  {
        -:  121:	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
        -:  122:	    return;
        -:  123:	  }
        -:  124:#endif
    #####:  125:	::operator delete(__p);
    %%%%%:  125-block  0
        -:  126:      }
------------------
_ZN9__gnu_cxx13new_allocatorIN7testing14TestPartResultEE10deallocateEPS2_m:
    #####:  116:      deallocate(pointer __p, size_type)
    %%%%%:  116-block  0
        -:  117:      {
        -:  118:#if __cpp_aligned_new
        -:  119:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  120:	  {
        -:  121:	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
        -:  122:	    return;
        -:  123:	  }
        -:  124:#endif
    #####:  125:	::operator delete(__p);
    %%%%%:  125-block  0
        -:  126:      }
------------------
_ZN9__gnu_cxx13new_allocatorIPN7testing8internal30ParameterizedTestSuiteInfoBaseEE10deallocateEPS4_m:
    #####:  116:      deallocate(pointer __p, size_type)
    %%%%%:  116-block  0
        -:  117:      {
        -:  118:#if __cpp_aligned_new
        -:  119:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  120:	  {
        -:  121:	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
        -:  122:	    return;
        -:  123:	  }
        -:  124:#endif
    #####:  125:	::operator delete(__p);
    %%%%%:  125-block  0
        -:  126:      }
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_m:
        2:  116:      deallocate(pointer __p, size_type)
        2:  116-block  0
        -:  117:      {
        -:  118:#if __cpp_aligned_new
        -:  119:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  120:	  {
        -:  121:	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
        -:  122:	    return;
        -:  123:	  }
        -:  124:#endif
        2:  125:	::operator delete(__p);
        2:  125-block  0
        -:  126:      }
------------------
_ZN9__gnu_cxx13new_allocatorIdE10deallocateEPdm:
    #####:  116:      deallocate(pointer __p, size_type)
    %%%%%:  116-block  0
        -:  117:      {
        -:  118:#if __cpp_aligned_new
        -:  119:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  120:	  {
        -:  121:	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
        -:  122:	    return;
        -:  123:	  }
        -:  124:#endif
    #####:  125:	::operator delete(__p);
    %%%%%:  125-block  0
        -:  126:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt6vectorIdSaIdEEE10deallocateEPS3_m:
    #####:  116:      deallocate(pointer __p, size_type)
    %%%%%:  116-block  0
        -:  117:      {
        -:  118:#if __cpp_aligned_new
        -:  119:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  120:	  {
        -:  121:	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
        -:  122:	    return;
        -:  123:	  }
        -:  124:#endif
    #####:  125:	::operator delete(__p);
    %%%%%:  125-block  0
        -:  126:      }
------------------
_ZN9__gnu_cxx13new_allocatorIN7testing8internal13edit_distance8EditTypeEE10deallocateEPS4_m:
    #####:  116:      deallocate(pointer __p, size_type)
    %%%%%:  116-block  0
        -:  117:      {
        -:  118:#if __cpp_aligned_new
        -:  119:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  120:	  {
        -:  121:	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
        -:  122:	    return;
        -:  123:	  }
        -:  124:#endif
    #####:  125:	::operator delete(__p);
    %%%%%:  125-block  0
        -:  126:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt6vectorIN7testing8internal13edit_distance8EditTypeESaIS5_EEE10deallocateEPS7_m:
    #####:  116:      deallocate(pointer __p, size_type)
    %%%%%:  116-block  0
        -:  117:      {
        -:  118:#if __cpp_aligned_new
        -:  119:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  120:	  {
        -:  121:	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
        -:  122:	    return;
        -:  123:	  }
        -:  124:#endif
    #####:  125:	::operator delete(__p);
    %%%%%:  125-block  0
        -:  126:      }
------------------
_ZN9__gnu_cxx13new_allocatorImE10deallocateEPmm:
    #####:  116:      deallocate(pointer __p, size_type)
    %%%%%:  116-block  0
        -:  117:      {
        -:  118:#if __cpp_aligned_new
        -:  119:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  120:	  {
        -:  121:	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
        -:  122:	    return;
        -:  123:	  }
        -:  124:#endif
    #####:  125:	::operator delete(__p);
    %%%%%:  125-block  0
        -:  126:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE10deallocateEPS8_m:
    #####:  116:      deallocate(pointer __p, size_type)
    %%%%%:  116-block  0
        -:  117:      {
        -:  118:#if __cpp_aligned_new
        -:  119:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  120:	  {
        -:  121:	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
        -:  122:	    return;
        -:  123:	  }
        -:  124:#endif
    #####:  125:	::operator delete(__p);
    %%%%%:  125-block  0
        -:  126:      }
------------------
_ZN9__gnu_cxx13new_allocatorIN7testing12TestPropertyEE10deallocateEPS2_m:
    #####:  116:      deallocate(pointer __p, size_type)
    %%%%%:  116-block  0
        -:  117:      {
        -:  118:#if __cpp_aligned_new
        -:  119:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  120:	  {
        -:  121:	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
        -:  122:	    return;
        -:  123:	  }
        -:  124:#endif
    #####:  125:	::operator delete(__p);
    %%%%%:  125-block  0
        -:  126:      }
------------------
_ZN9__gnu_cxx13new_allocatorIPN7testing8TestInfoEE10deallocateEPS3_m:
       20:  116:      deallocate(pointer __p, size_type)
       20:  116-block  0
        -:  117:      {
        -:  118:#if __cpp_aligned_new
        -:  119:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  120:	  {
        -:  121:	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
        -:  122:	    return;
        -:  123:	  }
        -:  124:#endif
       20:  125:	::operator delete(__p);
       20:  125-block  0
        -:  126:      }
------------------
_ZN9__gnu_cxx13new_allocatorIiE10deallocateEPim:
    #####:  116:      deallocate(pointer __p, size_type)
    %%%%%:  116-block  0
        -:  117:      {
        -:  118:#if __cpp_aligned_new
        -:  119:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  120:	  {
        -:  121:	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
        -:  122:	    return;
        -:  123:	  }
        -:  124:#endif
    #####:  125:	::operator delete(__p);
    %%%%%:  125-block  0
        -:  126:      }
------------------
_ZN9__gnu_cxx13new_allocatorIPN7testing17TestEventListenerEE10deallocateEPS3_m:
        1:  116:      deallocate(pointer __p, size_type)
        1:  116-block  0
        -:  117:      {
        -:  118:#if __cpp_aligned_new
        -:  119:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  120:	  {
        -:  121:	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
        -:  122:	    return;
        -:  123:	  }
        -:  124:#endif
        1:  125:	::operator delete(__p);
        1:  125-block  0
        -:  126:      }
------------------
_ZN9__gnu_cxx13new_allocatorIPN7testing11EnvironmentEE10deallocateEPS3_m:
    #####:  116:      deallocate(pointer __p, size_type)
    %%%%%:  116-block  0
        -:  117:      {
        -:  118:#if __cpp_aligned_new
        -:  119:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  120:	  {
        -:  121:	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
        -:  122:	    return;
        -:  123:	  }
        -:  124:#endif
    #####:  125:	::operator delete(__p);
    %%%%%:  125-block  0
        -:  126:      }
------------------
_ZN9__gnu_cxx13new_allocatorIN7testing8internal9TraceInfoEE10deallocateEPS3_m:
    #####:  116:      deallocate(pointer __p, size_type)
    %%%%%:  116-block  0
        -:  117:      {
        -:  118:#if __cpp_aligned_new
        -:  119:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  120:	  {
        -:  121:	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
        -:  122:	    return;
        -:  123:	  }
        -:  124:#endif
    #####:  125:	::operator delete(__p);
    %%%%%:  125-block  0
        -:  126:      }
------------------
_ZN9__gnu_cxx13new_allocatorIPN7testing9TestSuiteEE10deallocateEPS3_m:
        3:  116:      deallocate(pointer __p, size_type)
        3:  116-block  0
        -:  117:      {
        -:  118:#if __cpp_aligned_new
        -:  119:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  120:	  {
        -:  121:	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
        -:  122:	    return;
        -:  123:	  }
        -:  124:#endif
        3:  125:	::operator delete(__p);
        3:  125-block  0
        -:  126:      }
------------------
_ZN9__gnu_cxx13new_allocatorIPcE10deallocateEPS1_m:
    #####:  116:      deallocate(pointer __p, size_type)
    %%%%%:  116-block  0
        -:  117:      {
        -:  118:#if __cpp_aligned_new
        -:  119:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  120:	  {
        -:  121:	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
        -:  122:	    return;
        -:  123:	  }
        -:  124:#endif
    #####:  125:	::operator delete(__p);
    %%%%%:  125-block  0
        -:  126:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN7testing8internal34TypeParameterizedTestSuiteRegistry30TypeParameterizedTestSuiteInfoEEEE10deallocateEPSF_m:
    #####:  116:      deallocate(pointer __p, size_type)
    %%%%%:  116-block  0
        -:  117:      {
        -:  118:#if __cpp_aligned_new
        -:  119:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  120:	  {
        -:  121:	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
        -:  122:	    return;
        -:  123:	  }
        -:  124:#endif
    #####:  125:	::operator delete(__p);
    %%%%%:  125-block  0
        -:  126:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmEEE10deallocateEPSB_m:
    #####:  116:      deallocate(pointer __p, size_type)
    %%%%%:  116-block  0
        -:  117:      {
        -:  118:#if __cpp_aligned_new
        -:  119:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  120:	  {
        -:  121:	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
        -:  122:	    return;
        -:  123:	  }
        -:  124:#endif
    #####:  125:	::operator delete(__p);
    %%%%%:  125-block  0
        -:  126:      }
------------------
        -:  127:
        -:  128:      size_type
      76*:  129:      max_size() const _GLIBCXX_USE_NOEXCEPT
      76*:  130:      { return size_t(-1) / sizeof(_Tp); }
------------------
_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv:
        4:  129:      max_size() const _GLIBCXX_USE_NOEXCEPT
        4:  130:      { return size_t(-1) / sizeof(_Tp); }
        4:  130-block  0
------------------
_ZNK9__gnu_cxx13new_allocatorIcE8max_sizeEv:
    #####:  129:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  130:      { return size_t(-1) / sizeof(_Tp); }
    %%%%%:  130-block  0
------------------
_ZNK9__gnu_cxx13new_allocatorIN7testing8internal13edit_distance8EditTypeEE8max_sizeEv:
    #####:  129:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  130:      { return size_t(-1) / sizeof(_Tp); }
    %%%%%:  130-block  0
------------------
_ZNK9__gnu_cxx13new_allocatorIN7testing14TestPartResultEE8max_sizeEv:
    #####:  129:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  130:      { return size_t(-1) / sizeof(_Tp); }
    %%%%%:  130-block  0
------------------
_ZNK9__gnu_cxx13new_allocatorIN7testing12TestPropertyEE8max_sizeEv:
    #####:  129:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  130:      { return size_t(-1) / sizeof(_Tp); }
    %%%%%:  130-block  0
------------------
_ZNK9__gnu_cxx13new_allocatorIPN7testing8TestInfoEE8max_sizeEv:
       60:  129:      max_size() const _GLIBCXX_USE_NOEXCEPT
       60:  130:      { return size_t(-1) / sizeof(_Tp); }
       60:  130-block  0
------------------
_ZNK9__gnu_cxx13new_allocatorIPN7testing17TestEventListenerEE8max_sizeEv:
        3:  129:      max_size() const _GLIBCXX_USE_NOEXCEPT
        3:  130:      { return size_t(-1) / sizeof(_Tp); }
        3:  130-block  0
------------------
_ZNK9__gnu_cxx13new_allocatorIPN7testing11EnvironmentEE8max_sizeEv:
    #####:  129:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  130:      { return size_t(-1) / sizeof(_Tp); }
    %%%%%:  130-block  0
------------------
_ZNK9__gnu_cxx13new_allocatorIN7testing8internal9TraceInfoEE8max_sizeEv:
    #####:  129:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  130:      { return size_t(-1) / sizeof(_Tp); }
    %%%%%:  130-block  0
------------------
_ZNK9__gnu_cxx13new_allocatorIPN7testing9TestSuiteEE8max_sizeEv:
        9:  129:      max_size() const _GLIBCXX_USE_NOEXCEPT
        9:  130:      { return size_t(-1) / sizeof(_Tp); }
        9:  130-block  0
------------------
_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN7testing8internal34TypeParameterizedTestSuiteRegistry30TypeParameterizedTestSuiteInfoEEEE8max_sizeEv:
    #####:  129:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  130:      { return size_t(-1) / sizeof(_Tp); }
    %%%%%:  130-block  0
------------------
_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8max_sizeEv:
    #####:  129:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  130:      { return size_t(-1) / sizeof(_Tp); }
    %%%%%:  130-block  0
------------------
_ZNK9__gnu_cxx13new_allocatorIdE8max_sizeEv:
    #####:  129:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  130:      { return size_t(-1) / sizeof(_Tp); }
    %%%%%:  130-block  0
------------------
_ZNK9__gnu_cxx13new_allocatorISt6vectorIdSaIdEEE8max_sizeEv:
    #####:  129:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  130:      { return size_t(-1) / sizeof(_Tp); }
    %%%%%:  130-block  0
------------------
_ZNK9__gnu_cxx13new_allocatorISt6vectorIN7testing8internal13edit_distance8EditTypeESaIS5_EEE8max_sizeEv:
    #####:  129:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  130:      { return size_t(-1) / sizeof(_Tp); }
    %%%%%:  130-block  0
------------------
_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmEEE8max_sizeEv:
    #####:  129:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  130:      { return size_t(-1) / sizeof(_Tp); }
    %%%%%:  130-block  0
------------------
_ZNK9__gnu_cxx13new_allocatorImE8max_sizeEv:
    #####:  129:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  130:      { return size_t(-1) / sizeof(_Tp); }
    %%%%%:  130-block  0
------------------
_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeISt4pairIcPKcEEE8max_sizeEv:
    #####:  129:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  130:      { return size_t(-1) / sizeof(_Tp); }
    %%%%%:  130-block  0
------------------
_ZNK9__gnu_cxx13new_allocatorIiE8max_sizeEv:
    #####:  129:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  130:      { return size_t(-1) / sizeof(_Tp); }
    %%%%%:  130-block  0
------------------
_ZNK9__gnu_cxx13new_allocatorIPcE8max_sizeEv:
    #####:  129:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  130:      { return size_t(-1) / sizeof(_Tp); }
    %%%%%:  130-block  0
------------------
_ZNK9__gnu_cxx13new_allocatorIwE8max_sizeEv:
    #####:  129:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  130:      { return size_t(-1) / sizeof(_Tp); }
    %%%%%:  130-block  0
------------------
        -:  131:
        -:  132:#if __cplusplus >= 201103L
        -:  133:      template<typename _Up, typename... _Args>
        -:  134:	void
      98*:  135:	construct(_Up* __p, _Args&&... __args)
      98*:  136:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6_EEEvPT_DpOT0_:
        1:  135:	construct(_Up* __p, _Args&&... __args)
        1:  136:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
        1:  136-block  0
------------------
_ZN9__gnu_cxx13new_allocatorIN7testing8internal13edit_distance8EditTypeEE9constructIS4_JRKS4_EEEvPT_DpOT0_:
    #####:  135:	construct(_Up* __p, _Args&&... __args)
    #####:  136:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    %%%%%:  136-block  0
------------------
_ZN9__gnu_cxx13new_allocatorIN7testing14TestPartResultEE9constructIS2_JRKS2_EEEvPT_DpOT0_:
    #####:  135:	construct(_Up* __p, _Args&&... __args)
    #####:  136:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    %%%%%:  136-block  0
    %%%%%:  136-block  1
    $$$$$:  136-block  2
------------------
_ZN9__gnu_cxx13new_allocatorIN7testing12TestPropertyEE9constructIS2_JRKS2_EEEvPT_DpOT0_:
    #####:  135:	construct(_Up* __p, _Args&&... __args)
    #####:  136:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    %%%%%:  136-block  0
    %%%%%:  136-block  1
    $$$$$:  136-block  2
------------------
_ZN9__gnu_cxx13new_allocatorIPN7testing8TestInfoEE9constructIS3_JRKS3_EEEvPT_DpOT0_:
       44:  135:	construct(_Up* __p, _Args&&... __args)
       44:  136:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
       44:  136-block  0
------------------
_ZN9__gnu_cxx13new_allocatorIPN7testing17TestEventListenerEE9constructIS3_JRKS3_EEEvPT_DpOT0_:
        1:  135:	construct(_Up* __p, _Args&&... __args)
        1:  136:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
        1:  136-block  0
------------------
_ZN9__gnu_cxx13new_allocatorIPN7testing11EnvironmentEE9constructIS3_JRKS3_EEEvPT_DpOT0_:
    #####:  135:	construct(_Up* __p, _Args&&... __args)
    #####:  136:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    %%%%%:  136-block  0
------------------
_ZN9__gnu_cxx13new_allocatorIN7testing8internal9TraceInfoEE9constructIS3_JRKS3_EEEvPT_DpOT0_:
    #####:  135:	construct(_Up* __p, _Args&&... __args)
    #####:  136:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    %%%%%:  136-block  0
    %%%%%:  136-block  1
    $$$$$:  136-block  2
------------------
_ZN9__gnu_cxx13new_allocatorIPN7testing9TestSuiteEE9constructIS3_JRKS3_EEEvPT_DpOT0_:
        4:  135:	construct(_Up* __p, _Args&&... __args)
        4:  136:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
        4:  136-block  0
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS7_JRKS7_EEEvPT_DpOT0_:
    #####:  135:	construct(_Up* __p, _Args&&... __args)
    #####:  136:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    %%%%%:  136-block  0
    %%%%%:  136-block  1
    $$$$$:  136-block  2
------------------
_ZN9__gnu_cxx13new_allocatorImE9constructImJmEEEvPT_DpOT0_:
    #####:  135:	construct(_Up* __p, _Args&&... __args)
    #####:  136:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    %%%%%:  136-block  0
------------------
_ZN9__gnu_cxx13new_allocatorIiE9constructIiJiEEEvPT_DpOT0_:
       48:  135:	construct(_Up* __p, _Args&&... __args)
       48:  136:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
       48:  136-block  0
------------------
_ZN9__gnu_cxx13new_allocatorIPN7testing9TestSuiteEE9constructIS3_JS3_EEEvPT_DpOT0_:
    #####:  135:	construct(_Up* __p, _Args&&... __args)
    #####:  136:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    %%%%%:  136-block  0
------------------
_ZN9__gnu_cxx13new_allocatorIPcE9constructIS1_JS1_EEEvPT_DpOT0_:
    #####:  135:	construct(_Up* __p, _Args&&... __args)
    #####:  136:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    %%%%%:  136-block  0
------------------
_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt4pairIcPKcEEE9constructIS5_JS5_EEEvPT_DpOT0_:
    #####:  135:	construct(_Up* __p, _Args&&... __args)
    #####:  136:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    %%%%%:  136-block  0
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN7testing8internal34TypeParameterizedTestSuiteRegistry30TypeParameterizedTestSuiteInfoEEEE9constructISE_JS8_SD_EEEvPT_DpOT0_:
    #####:  135:	construct(_Up* __p, _Args&&... __args)
    #####:  136:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    %%%%%:  136-block  0
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmEEE9constructISA_JRKSt21piecewise_construct_tSt5tupleIJRS9_EESH_IJEEEEEvPT_DpOT0_:
    #####:  135:	construct(_Up* __p, _Args&&... __args)
    #####:  136:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    %%%%%:  136-block  0
    %%%%%:  136-block  1
    $$$$$:  136-block  2
    $$$$$:  136-block  3
    $$$$$:  136-block  4
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS7_JS7_EEEvPT_DpOT0_:
    #####:  135:	construct(_Up* __p, _Args&&... __args)
    #####:  136:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    %%%%%:  136-block  0
------------------
        -:  137:
        -:  138:      template<typename _Up>
        -:  139:	void
    #####:  140:	destroy(_Up* __p) { __p->~_Up(); }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7destroyIS7_EEvPT_:
    #####:  140:	destroy(_Up* __p) { __p->~_Up(); }
    %%%%%:  140-block  0
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmEEE7destroyISA_EEvPT_:
    #####:  140:	destroy(_Up* __p) { __p->~_Up(); }
    %%%%%:  140-block  0
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEN7testing8internal34TypeParameterizedTestSuiteRegistry30TypeParameterizedTestSuiteInfoEEEE7destroyISE_EEvPT_:
    #####:  140:	destroy(_Up* __p) { __p->~_Up(); }
    %%%%%:  140-block  0
------------------
_ZN9__gnu_cxx13new_allocatorIPcE7destroyIS1_EEvPT_:
    #####:  140:	destroy(_Up* __p) { __p->~_Up(); }
------------------
_ZN9__gnu_cxx13new_allocatorIiE7destroyIiEEvPT_:
    #####:  140:	destroy(_Up* __p) { __p->~_Up(); }
------------------
_ZN9__gnu_cxx13new_allocatorImE7destroyImEEvPT_:
    #####:  140:	destroy(_Up* __p) { __p->~_Up(); }
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7destroyIS6_EEvPT_:
    #####:  140:	destroy(_Up* __p) { __p->~_Up(); }
    %%%%%:  140-block  0
------------------
_ZN9__gnu_cxx13new_allocatorIPN7testing9TestSuiteEE7destroyIS3_EEvPT_:
    #####:  140:	destroy(_Up* __p) { __p->~_Up(); }
------------------
_ZN9__gnu_cxx13new_allocatorIPN7testing11EnvironmentEE7destroyIS3_EEvPT_:
    #####:  140:	destroy(_Up* __p) { __p->~_Up(); }
------------------
_ZN9__gnu_cxx13new_allocatorIPN7testing17TestEventListenerEE7destroyIS3_EEvPT_:
    #####:  140:	destroy(_Up* __p) { __p->~_Up(); }
------------------
_ZN9__gnu_cxx13new_allocatorIPN7testing8TestInfoEE7destroyIS3_EEvPT_:
    #####:  140:	destroy(_Up* __p) { __p->~_Up(); }
------------------
_ZN9__gnu_cxx13new_allocatorIN7testing12TestPropertyEE7destroyIS2_EEvPT_:
    #####:  140:	destroy(_Up* __p) { __p->~_Up(); }
    %%%%%:  140-block  0
------------------
_ZN9__gnu_cxx13new_allocatorIN7testing14TestPartResultEE7destroyIS2_EEvPT_:
    #####:  140:	destroy(_Up* __p) { __p->~_Up(); }
    %%%%%:  140-block  0
------------------
_ZN9__gnu_cxx13new_allocatorISt10_List_nodeISt4pairIcPKcEEE7destroyIS5_EEvPT_:
    #####:  140:	destroy(_Up* __p) { __p->~_Up(); }
------------------
_ZN9__gnu_cxx13new_allocatorIN7testing8internal13edit_distance8EditTypeEE7destroyIS4_EEvPT_:
    #####:  140:	destroy(_Up* __p) { __p->~_Up(); }
------------------
_ZN9__gnu_cxx13new_allocatorIN7testing8internal9TraceInfoEE7destroyIS3_EEvPT_:
    #####:  140:	destroy(_Up* __p) { __p->~_Up(); }
    %%%%%:  140-block  0
------------------
        -:  141:#else
        -:  142:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  143:      // 402. wrong new expression in [some_] allocator::construct
        -:  144:      void
        -:  145:      construct(pointer __p, const _Tp& __val)
        -:  146:      { ::new((void *)__p) _Tp(__val); }
        -:  147:
        -:  148:      void
        -:  149:      destroy(pointer __p) { __p->~_Tp(); }
        -:  150:#endif
        -:  151:    };
        -:  152:
        -:  153:  template<typename _Tp>
        -:  154:    inline bool
        -:  155:    operator==(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
        -:  156:    { return true; }
        -:  157:
        -:  158:  template<typename _Tp>
        -:  159:    inline bool
        -:  160:    operator!=(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
        -:  161:    { return false; }
        -:  162:
        -:  163:_GLIBCXX_END_NAMESPACE_VERSION
        -:  164:} // namespace
        -:  165:
        -:  166:#endif
